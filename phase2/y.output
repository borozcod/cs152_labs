Terminals unused in grammar

   WHILE
   DO
   BEGINLOOP
   ENDLOOP
   CONTINUE
   READ
   WRITE
   RETURN
   NO_IDENT1
   NO_IDENT2
   COMMENT


Rules useless in parser due to conflicts

   27 expressionseq: ADD multexpression
   28              | SUB multexpression
   29              | %empty


State 44 conflicts: 2 shift/reduce
State 48 conflicts: 1 shift/reduce
State 51 conflicts: 1 shift/reduce
State 58 conflicts: 13 reduce/reduce
State 71 conflicts: 1 shift/reduce
State 78 conflicts: 1 shift/reduce
State 79 conflicts: 1 shift/reduce
State 80 conflicts: 1 shift/reduce
State 84 conflicts: 1 shift/reduce
State 87 conflicts: 1 shift/reduce
State 88 conflicts: 1 shift/reduce
State 89 conflicts: 1 shift/reduce
State 99 conflicts: 13 reduce/reduce
State 100 conflicts: 13 reduce/reduce
State 109 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: line
    2      | input '\n' line

    3 line: '\n'
    4     | function '\n'

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    6 ident: IDENT

    7 declarationseq: declaration declarationseq
    8               | %empty

    9 declaration: ident declarations

   10 declarations: COMMA ident declarations
   11             | COLON arr INTEGER SEMICOLON

   12 arr: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF
   13    | %empty

   14 statements: statement SEMICOLON statements
   15           | %empty

   16 assignment: var ASSIGN expression

   17 ifstmt: IF boolexpr THEN statements else ENDIF SEMICOLON

   18 else: ELSE statements
   19     | %empty

   20 statement: assignment
   21          | ifstmt

   22 expression: multexpression expops

   23 expops: ADD multexpression
   24       | SUB multexpression
   25       | %empty

   26 expression: multexpression expressionseq

   27 expressionseq: ADD multexpression
   28              | SUB multexpression
   29              | %empty

   30 multexpression: term termseq

   31 termseq: MULT term
   32        | DIV term
   33        | MOD term
   34        | %empty

   35 neg: SUB
   36    | %empty

   37 termoption: var
   38           | NUMBER
   39           | L_PAREN expression R_PAREN

   40 term: neg termoption
   41     | ident L_PAREN expressionlist R_PAREN

   42 expressionlist: expression expressioncomma

   43 expressioncomma: COMMA expression expressioncomma
   44                | %empty

   45 var: ident
   46    | ident L_SQUARE_BRACKET expression R_SQUARE_BRACKET

   47 not: NOT
   48    | %empty

   49 comp: EQ
   50     | NEQ
   51     | LT
   52     | GT
   53     | LTE
   54     | GTE

   55 boolexpr: relationandexpr boolexprseq

   56 boolexprseq: OR relationandexpr boolexprseq
   57            | %empty

   58 relationandexpr: relationexpr relationandexprseq

   59 relationandexprseq: AND relationexpr relationandexprseq
   60                   | %empty

   61 relationexpr: not relationexproptions

   62 relationexproptions: expression comp expression
   63                    | TRUE
   64                    | FALSE
   65                    | L_PAREN boolexpr R_PAREN


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 2 3 4
error (256)
IDENT (258) 6
FUNCTION (259) 5
BEGIN_PARAMS (260) 5
END_PARAMS (261) 5
BEGIN_LOCALS (262) 5
END_LOCALS (263) 5
BEGIN_BODY (264) 5
END_BODY (265) 5
INTEGER (266) 11
ARRAY (267) 12
OF (268) 12
IF (269) 17
THEN (270) 17
ENDIF (271) 17
ELSE (272) 18
WHILE (273)
DO (274)
BEGINLOOP (275)
ENDLOOP (276)
CONTINUE (277)
READ (278)
WRITE (279)
AND (280) 59
OR (281) 56
NOT (282) 47
TRUE (283) 63
FALSE (284) 64
RETURN (285)
SUB (286) 24 28 35
ADD (287) 23 27
MULT (288) 31
DIV (289) 32
MOD (290) 33
EQ (291) 49
NEQ (292) 50
LT (293) 51
GT (294) 52
LTE (295) 53
GTE (296) 54
NUMBER (297) 12 38
SEMICOLON (298) 5 11 14 17
COLON (299) 11
COMMA (300) 10 43
L_PAREN (301) 39 41 65
R_PAREN (302) 39 41 65
L_SQUARE_BRACKET (303) 12 46
R_SQUARE_BRACKET (304) 12 46
ASSIGN (305) 16
NO_IDENT1 (306)
NO_IDENT2 (307)
COMMENT (308)


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
input (56)
    on left: 1 2, on right: 0 2
line (57)
    on left: 3 4, on right: 1 2
function (58)
    on left: 5, on right: 4
ident (59)
    on left: 6, on right: 5 9 10 41 45 46
declarationseq (60)
    on left: 7 8, on right: 5 7
declaration (61)
    on left: 9, on right: 7
declarations (62)
    on left: 10 11, on right: 9 10
arr (63)
    on left: 12 13, on right: 11
statements (64)
    on left: 14 15, on right: 5 14 17 18
assignment (65)
    on left: 16, on right: 20
ifstmt (66)
    on left: 17, on right: 21
else (67)
    on left: 18 19, on right: 17
statement (68)
    on left: 20 21, on right: 14
expression (69)
    on left: 22 26, on right: 16 39 42 43 46 62
expops (70)
    on left: 23 24 25, on right: 22
expressionseq (71)
    on left: 27 28 29, on right: 26
multexpression (72)
    on left: 30, on right: 22 23 24 26 27 28
termseq (73)
    on left: 31 32 33 34, on right: 30
neg (74)
    on left: 35 36, on right: 40
termoption (75)
    on left: 37 38 39, on right: 40
term (76)
    on left: 40 41, on right: 30 31 32 33
expressionlist (77)
    on left: 42, on right: 41
expressioncomma (78)
    on left: 43 44, on right: 42 43
var (79)
    on left: 45 46, on right: 16 37
not (80)
    on left: 47 48, on right: 61
comp (81)
    on left: 49 50 51 52 53 54, on right: 62
boolexpr (82)
    on left: 55, on right: 17 65
boolexprseq (83)
    on left: 56 57, on right: 55 56
relationandexpr (84)
    on left: 58, on right: 55 56
relationandexprseq (85)
    on left: 59 60, on right: 58 59
relationexpr (86)
    on left: 61, on right: 58 59
relationexproptions (87)
    on left: 62 63 64 65, on right: 61


State 0

    0 $accept: . input $end

    FUNCTION  shift, and go to state 1
    '\n'      shift, and go to state 2

    input     go to state 3
    line      go to state 4
    function  go to state 5


State 1

    5 function: FUNCTION . ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 6

    ident  go to state 7


State 2

    3 line: '\n' .

    $default  reduce using rule 3 (line)


State 3

    0 $accept: input . $end
    2 input: input . '\n' line

    $end  shift, and go to state 8
    '\n'  shift, and go to state 9


State 4

    1 input: line .

    $default  reduce using rule 1 (input)


State 5

    4 line: function . '\n'

    '\n'  shift, and go to state 10


State 6

    6 ident: IDENT .

    $default  reduce using rule 6 (ident)


State 7

    5 function: FUNCTION ident . SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    SEMICOLON  shift, and go to state 11


State 8

    0 $accept: input $end .

    $default  accept


State 9

    2 input: input '\n' . line

    FUNCTION  shift, and go to state 1
    '\n'      shift, and go to state 2

    line      go to state 12
    function  go to state 5


State 10

    4 line: function '\n' .

    $default  reduce using rule 4 (line)


State 11

    5 function: FUNCTION ident SEMICOLON . BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_PARAMS  shift, and go to state 13


State 12

    2 input: input '\n' line .

    $default  reduce using rule 2 (input)


State 13

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS . declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 6

    $default  reduce using rule 8 (declarationseq)

    ident           go to state 14
    declarationseq  go to state 15
    declaration     go to state 16


State 14

    9 declaration: ident . declarations

    COLON  shift, and go to state 17
    COMMA  shift, and go to state 18

    declarations  go to state 19


State 15

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq . END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    END_PARAMS  shift, and go to state 20


State 16

    7 declarationseq: declaration . declarationseq

    IDENT  shift, and go to state 6

    $default  reduce using rule 8 (declarationseq)

    ident           go to state 14
    declarationseq  go to state 21
    declaration     go to state 16


State 17

   11 declarations: COLON . arr INTEGER SEMICOLON

    ARRAY  shift, and go to state 22

    $default  reduce using rule 13 (arr)

    arr  go to state 23


State 18

   10 declarations: COMMA . ident declarations

    IDENT  shift, and go to state 6

    ident  go to state 24


State 19

    9 declaration: ident declarations .

    $default  reduce using rule 9 (declaration)


State 20

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS . BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_LOCALS  shift, and go to state 25


State 21

    7 declarationseq: declaration declarationseq .

    $default  reduce using rule 7 (declarationseq)


State 22

   12 arr: ARRAY . L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF

    L_SQUARE_BRACKET  shift, and go to state 26


State 23

   11 declarations: COLON arr . INTEGER SEMICOLON

    INTEGER  shift, and go to state 27


State 24

   10 declarations: COMMA ident . declarations

    COLON  shift, and go to state 17
    COMMA  shift, and go to state 18

    declarations  go to state 28


State 25

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS . declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 6

    $default  reduce using rule 8 (declarationseq)

    ident           go to state 14
    declarationseq  go to state 29
    declaration     go to state 16


State 26

   12 arr: ARRAY L_SQUARE_BRACKET . NUMBER R_SQUARE_BRACKET OF

    NUMBER  shift, and go to state 30


State 27

   11 declarations: COLON arr INTEGER . SEMICOLON

    SEMICOLON  shift, and go to state 31


State 28

   10 declarations: COMMA ident declarations .

    $default  reduce using rule 10 (declarations)


State 29

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq . END_LOCALS BEGIN_BODY statements END_BODY

    END_LOCALS  shift, and go to state 32


State 30

   12 arr: ARRAY L_SQUARE_BRACKET NUMBER . R_SQUARE_BRACKET OF

    R_SQUARE_BRACKET  shift, and go to state 33


State 31

   11 declarations: COLON arr INTEGER SEMICOLON .

    $default  reduce using rule 11 (declarations)


State 32

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 34


State 33

   12 arr: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET . OF

    OF  shift, and go to state 35


State 34

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY . statements END_BODY

    IDENT  shift, and go to state 6
    IF     shift, and go to state 36

    $default  reduce using rule 15 (statements)

    ident       go to state 37
    statements  go to state 38
    assignment  go to state 39
    ifstmt      go to state 40
    statement   go to state 41
    var         go to state 42


State 35

   12 arr: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF .

    $default  reduce using rule 12 (arr)


State 36

   17 ifstmt: IF . boolexpr THEN statements else ENDIF SEMICOLON

    NOT  shift, and go to state 43

    $default  reduce using rule 48 (not)

    not              go to state 44
    boolexpr         go to state 45
    relationandexpr  go to state 46
    relationexpr     go to state 47


State 37

   45 var: ident .
   46    | ident . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 48

    $default  reduce using rule 45 (var)


State 38

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 49


State 39

   20 statement: assignment .

    $default  reduce using rule 20 (statement)


State 40

   21 statement: ifstmt .

    $default  reduce using rule 21 (statement)


State 41

   14 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 50


State 42

   16 assignment: var . ASSIGN expression

    ASSIGN  shift, and go to state 51


State 43

   47 not: NOT .

    $default  reduce using rule 47 (not)


State 44

   61 relationexpr: not . relationexproptions

    IDENT    shift, and go to state 6
    TRUE     shift, and go to state 52
    FALSE    shift, and go to state 53
    SUB      shift, and go to state 54
    L_PAREN  shift, and go to state 55

    IDENT     [reduce using rule 36 (neg)]
    L_PAREN   [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident                go to state 56
    expression           go to state 57
    multexpression       go to state 58
    neg                  go to state 59
    term                 go to state 60
    relationexproptions  go to state 61


State 45

   17 ifstmt: IF boolexpr . THEN statements else ENDIF SEMICOLON

    THEN  shift, and go to state 62


State 46

   55 boolexpr: relationandexpr . boolexprseq

    OR  shift, and go to state 63

    $default  reduce using rule 57 (boolexprseq)

    boolexprseq  go to state 64


State 47

   58 relationandexpr: relationexpr . relationandexprseq

    AND  shift, and go to state 65

    $default  reduce using rule 60 (relationandexprseq)

    relationandexprseq  go to state 66


State 48

   46 var: ident L_SQUARE_BRACKET . expression R_SQUARE_BRACKET

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident           go to state 56
    expression      go to state 67
    multexpression  go to state 58
    neg             go to state 59
    term            go to state 60


State 49

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY .

    $default  reduce using rule 5 (function)


State 50

   14 statements: statement SEMICOLON . statements

    IDENT  shift, and go to state 6
    IF     shift, and go to state 36

    $default  reduce using rule 15 (statements)

    ident       go to state 37
    statements  go to state 68
    assignment  go to state 39
    ifstmt      go to state 40
    statement   go to state 41
    var         go to state 42


State 51

   16 assignment: var ASSIGN . expression

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident           go to state 56
    expression      go to state 69
    multexpression  go to state 58
    neg             go to state 59
    term            go to state 60


State 52

   63 relationexproptions: TRUE .

    $default  reduce using rule 63 (relationexproptions)


State 53

   64 relationexproptions: FALSE .

    $default  reduce using rule 64 (relationexproptions)


State 54

   35 neg: SUB .

    $default  reduce using rule 35 (neg)


State 55

   65 relationexproptions: L_PAREN . boolexpr R_PAREN

    NOT  shift, and go to state 43

    $default  reduce using rule 48 (not)

    not              go to state 44
    boolexpr         go to state 70
    relationandexpr  go to state 46
    relationexpr     go to state 47


State 56

   41 term: ident . L_PAREN expressionlist R_PAREN

    L_PAREN  shift, and go to state 71


State 57

   62 relationexproptions: expression . comp expression

    EQ   shift, and go to state 72
    NEQ  shift, and go to state 73
    LT   shift, and go to state 74
    GT   shift, and go to state 75
    LTE  shift, and go to state 76
    GTE  shift, and go to state 77

    comp  go to state 78


State 58

   22 expression: multexpression . expops
   26           | multexpression . expressionseq

    SUB  shift, and go to state 79
    ADD  shift, and go to state 80

    THEN              reduce using rule 25 (expops)
    THEN              [reduce using rule 29 (expressionseq)]
    AND               reduce using rule 25 (expops)
    AND               [reduce using rule 29 (expressionseq)]
    OR                reduce using rule 25 (expops)
    OR                [reduce using rule 29 (expressionseq)]
    EQ                reduce using rule 25 (expops)
    EQ                [reduce using rule 29 (expressionseq)]
    NEQ               reduce using rule 25 (expops)
    NEQ               [reduce using rule 29 (expressionseq)]
    LT                reduce using rule 25 (expops)
    LT                [reduce using rule 29 (expressionseq)]
    GT                reduce using rule 25 (expops)
    GT                [reduce using rule 29 (expressionseq)]
    LTE               reduce using rule 25 (expops)
    LTE               [reduce using rule 29 (expressionseq)]
    GTE               reduce using rule 25 (expops)
    GTE               [reduce using rule 29 (expressionseq)]
    SEMICOLON         reduce using rule 25 (expops)
    SEMICOLON         [reduce using rule 29 (expressionseq)]
    COMMA             reduce using rule 25 (expops)
    COMMA             [reduce using rule 29 (expressionseq)]
    R_PAREN           reduce using rule 25 (expops)
    R_PAREN           [reduce using rule 29 (expressionseq)]
    R_SQUARE_BRACKET  reduce using rule 25 (expops)
    R_SQUARE_BRACKET  [reduce using rule 29 (expressionseq)]
    $default          reduce using rule 25 (expops)

    expops         go to state 81
    expressionseq  go to state 82


State 59

   40 term: neg . termoption

    IDENT    shift, and go to state 6
    NUMBER   shift, and go to state 83
    L_PAREN  shift, and go to state 84

    ident       go to state 37
    termoption  go to state 85
    var         go to state 86


State 60

   30 multexpression: term . termseq

    MULT  shift, and go to state 87
    DIV   shift, and go to state 88
    MOD   shift, and go to state 89

    $default  reduce using rule 34 (termseq)

    termseq  go to state 90


State 61

   61 relationexpr: not relationexproptions .

    $default  reduce using rule 61 (relationexpr)


State 62

   17 ifstmt: IF boolexpr THEN . statements else ENDIF SEMICOLON

    IDENT  shift, and go to state 6
    IF     shift, and go to state 36

    $default  reduce using rule 15 (statements)

    ident       go to state 37
    statements  go to state 91
    assignment  go to state 39
    ifstmt      go to state 40
    statement   go to state 41
    var         go to state 42


State 63

   56 boolexprseq: OR . relationandexpr boolexprseq

    NOT  shift, and go to state 43

    $default  reduce using rule 48 (not)

    not              go to state 44
    relationandexpr  go to state 92
    relationexpr     go to state 47


State 64

   55 boolexpr: relationandexpr boolexprseq .

    $default  reduce using rule 55 (boolexpr)


State 65

   59 relationandexprseq: AND . relationexpr relationandexprseq

    NOT  shift, and go to state 43

    $default  reduce using rule 48 (not)

    not           go to state 44
    relationexpr  go to state 93


State 66

   58 relationandexpr: relationexpr relationandexprseq .

    $default  reduce using rule 58 (relationandexpr)


State 67

   46 var: ident L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 94


State 68

   14 statements: statement SEMICOLON statements .

    $default  reduce using rule 14 (statements)


State 69

   16 assignment: var ASSIGN expression .

    $default  reduce using rule 16 (assignment)


State 70

   65 relationexproptions: L_PAREN boolexpr . R_PAREN

    R_PAREN  shift, and go to state 95


State 71

   41 term: ident L_PAREN . expressionlist R_PAREN

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident           go to state 56
    expression      go to state 96
    multexpression  go to state 58
    neg             go to state 59
    term            go to state 60
    expressionlist  go to state 97


State 72

   49 comp: EQ .

    $default  reduce using rule 49 (comp)


State 73

   50 comp: NEQ .

    $default  reduce using rule 50 (comp)


State 74

   51 comp: LT .

    $default  reduce using rule 51 (comp)


State 75

   52 comp: GT .

    $default  reduce using rule 52 (comp)


State 76

   53 comp: LTE .

    $default  reduce using rule 53 (comp)


State 77

   54 comp: GTE .

    $default  reduce using rule 54 (comp)


State 78

   62 relationexproptions: expression comp . expression

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident           go to state 56
    expression      go to state 98
    multexpression  go to state 58
    neg             go to state 59
    term            go to state 60


State 79

   24 expops: SUB . multexpression
   28 expressionseq: SUB . multexpression

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident           go to state 56
    multexpression  go to state 99
    neg             go to state 59
    term            go to state 60


State 80

   23 expops: ADD . multexpression
   27 expressionseq: ADD . multexpression

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident           go to state 56
    multexpression  go to state 100
    neg             go to state 59
    term            go to state 60


State 81

   22 expression: multexpression expops .

    $default  reduce using rule 22 (expression)


State 82

   26 expression: multexpression expressionseq .

    $default  reduce using rule 26 (expression)


State 83

   38 termoption: NUMBER .

    $default  reduce using rule 38 (termoption)


State 84

   39 termoption: L_PAREN . expression R_PAREN

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident           go to state 56
    expression      go to state 101
    multexpression  go to state 58
    neg             go to state 59
    term            go to state 60


State 85

   40 term: neg termoption .

    $default  reduce using rule 40 (term)


State 86

   37 termoption: var .

    $default  reduce using rule 37 (termoption)


State 87

   31 termseq: MULT . term

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident  go to state 56
    neg    go to state 59
    term   go to state 102


State 88

   32 termseq: DIV . term

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident  go to state 56
    neg    go to state 59
    term   go to state 103


State 89

   33 termseq: MOD . term

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident  go to state 56
    neg    go to state 59
    term   go to state 104


State 90

   30 multexpression: term termseq .

    $default  reduce using rule 30 (multexpression)


State 91

   17 ifstmt: IF boolexpr THEN statements . else ENDIF SEMICOLON

    ELSE  shift, and go to state 105

    $default  reduce using rule 19 (else)

    else  go to state 106


State 92

   56 boolexprseq: OR relationandexpr . boolexprseq

    OR  shift, and go to state 63

    $default  reduce using rule 57 (boolexprseq)

    boolexprseq  go to state 107


State 93

   59 relationandexprseq: AND relationexpr . relationandexprseq

    AND  shift, and go to state 65

    $default  reduce using rule 60 (relationandexprseq)

    relationandexprseq  go to state 108


State 94

   46 var: ident L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    $default  reduce using rule 46 (var)


State 95

   65 relationexproptions: L_PAREN boolexpr R_PAREN .

    $default  reduce using rule 65 (relationexproptions)


State 96

   42 expressionlist: expression . expressioncomma

    COMMA  shift, and go to state 109

    $default  reduce using rule 44 (expressioncomma)

    expressioncomma  go to state 110


State 97

   41 term: ident L_PAREN expressionlist . R_PAREN

    R_PAREN  shift, and go to state 111


State 98

   62 relationexproptions: expression comp expression .

    $default  reduce using rule 62 (relationexproptions)


State 99

   24 expops: SUB multexpression .
   28 expressionseq: SUB multexpression .

    THEN              reduce using rule 24 (expops)
    THEN              [reduce using rule 28 (expressionseq)]
    AND               reduce using rule 24 (expops)
    AND               [reduce using rule 28 (expressionseq)]
    OR                reduce using rule 24 (expops)
    OR                [reduce using rule 28 (expressionseq)]
    EQ                reduce using rule 24 (expops)
    EQ                [reduce using rule 28 (expressionseq)]
    NEQ               reduce using rule 24 (expops)
    NEQ               [reduce using rule 28 (expressionseq)]
    LT                reduce using rule 24 (expops)
    LT                [reduce using rule 28 (expressionseq)]
    GT                reduce using rule 24 (expops)
    GT                [reduce using rule 28 (expressionseq)]
    LTE               reduce using rule 24 (expops)
    LTE               [reduce using rule 28 (expressionseq)]
    GTE               reduce using rule 24 (expops)
    GTE               [reduce using rule 28 (expressionseq)]
    SEMICOLON         reduce using rule 24 (expops)
    SEMICOLON         [reduce using rule 28 (expressionseq)]
    COMMA             reduce using rule 24 (expops)
    COMMA             [reduce using rule 28 (expressionseq)]
    R_PAREN           reduce using rule 24 (expops)
    R_PAREN           [reduce using rule 28 (expressionseq)]
    R_SQUARE_BRACKET  reduce using rule 24 (expops)
    R_SQUARE_BRACKET  [reduce using rule 28 (expressionseq)]
    $default          reduce using rule 24 (expops)


State 100

   23 expops: ADD multexpression .
   27 expressionseq: ADD multexpression .

    THEN              reduce using rule 23 (expops)
    THEN              [reduce using rule 27 (expressionseq)]
    AND               reduce using rule 23 (expops)
    AND               [reduce using rule 27 (expressionseq)]
    OR                reduce using rule 23 (expops)
    OR                [reduce using rule 27 (expressionseq)]
    EQ                reduce using rule 23 (expops)
    EQ                [reduce using rule 27 (expressionseq)]
    NEQ               reduce using rule 23 (expops)
    NEQ               [reduce using rule 27 (expressionseq)]
    LT                reduce using rule 23 (expops)
    LT                [reduce using rule 27 (expressionseq)]
    GT                reduce using rule 23 (expops)
    GT                [reduce using rule 27 (expressionseq)]
    LTE               reduce using rule 23 (expops)
    LTE               [reduce using rule 27 (expressionseq)]
    GTE               reduce using rule 23 (expops)
    GTE               [reduce using rule 27 (expressionseq)]
    SEMICOLON         reduce using rule 23 (expops)
    SEMICOLON         [reduce using rule 27 (expressionseq)]
    COMMA             reduce using rule 23 (expops)
    COMMA             [reduce using rule 27 (expressionseq)]
    R_PAREN           reduce using rule 23 (expops)
    R_PAREN           [reduce using rule 27 (expressionseq)]
    R_SQUARE_BRACKET  reduce using rule 23 (expops)
    R_SQUARE_BRACKET  [reduce using rule 27 (expressionseq)]
    $default          reduce using rule 23 (expops)


State 101

   39 termoption: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 112


State 102

   31 termseq: MULT term .

    $default  reduce using rule 31 (termseq)


State 103

   32 termseq: DIV term .

    $default  reduce using rule 32 (termseq)


State 104

   33 termseq: MOD term .

    $default  reduce using rule 33 (termseq)


State 105

   18 else: ELSE . statements

    IDENT  shift, and go to state 6
    IF     shift, and go to state 36

    $default  reduce using rule 15 (statements)

    ident       go to state 37
    statements  go to state 113
    assignment  go to state 39
    ifstmt      go to state 40
    statement   go to state 41
    var         go to state 42


State 106

   17 ifstmt: IF boolexpr THEN statements else . ENDIF SEMICOLON

    ENDIF  shift, and go to state 114


State 107

   56 boolexprseq: OR relationandexpr boolexprseq .

    $default  reduce using rule 56 (boolexprseq)


State 108

   59 relationandexprseq: AND relationexpr relationandexprseq .

    $default  reduce using rule 59 (relationandexprseq)


State 109

   43 expressioncomma: COMMA . expression expressioncomma

    IDENT  shift, and go to state 6
    SUB    shift, and go to state 54

    IDENT     [reduce using rule 36 (neg)]
    $default  reduce using rule 36 (neg)

    ident           go to state 56
    expression      go to state 115
    multexpression  go to state 58
    neg             go to state 59
    term            go to state 60


State 110

   42 expressionlist: expression expressioncomma .

    $default  reduce using rule 42 (expressionlist)


State 111

   41 term: ident L_PAREN expressionlist R_PAREN .

    $default  reduce using rule 41 (term)


State 112

   39 termoption: L_PAREN expression R_PAREN .

    $default  reduce using rule 39 (termoption)


State 113

   18 else: ELSE statements .

    $default  reduce using rule 18 (else)


State 114

   17 ifstmt: IF boolexpr THEN statements else ENDIF . SEMICOLON

    SEMICOLON  shift, and go to state 116


State 115

   43 expressioncomma: COMMA expression . expressioncomma

    COMMA  shift, and go to state 109

    $default  reduce using rule 44 (expressioncomma)

    expressioncomma  go to state 117


State 116

   17 ifstmt: IF boolexpr THEN statements else ENDIF SEMICOLON .

    $default  reduce using rule 17 (ifstmt)


State 117

   43 expressioncomma: COMMA expression expressioncomma .

    $default  reduce using rule 43 (expressioncomma)
