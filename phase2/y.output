Terminals unused in grammar

   EQUAL
   RETURN


State 35 conflicts: 3 shift/reduce
State 46 conflicts: 3 shift/reduce
State 62 conflicts: 1 shift/reduce
State 67 conflicts: 3 shift/reduce
State 74 conflicts: 3 shift/reduce
State 92 conflicts: 3 shift/reduce
State 97 conflicts: 3 shift/reduce
State 133 conflicts: 3 shift/reduce


Grammar

    0 $accept: input $end

    1 input: line
    2      | input '\n' line

    3 line: '\n'
    4     | function

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    6 ident: NO_IDENT1
    7      | NO_IDENT2
    8      | IDENT

    9 declarationseq: declaration declarationseq
   10               | %empty

   11 declaration: ident declarations

   12 declarations: COMMA ident declarations
   13             | COLON arr INTEGER SEMICOLON

   14 arr: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF
   15    | %empty

   16 comment: COMMENT

   17 statements: comment statements
   18           | statement SEMICOLON statements
   19           | %empty

   20 assignment: var ASSIGN expression

   21 ifstmt: IF boolexpr THEN statements else ENDIF

   22 else: ELSE statements
   23     | %empty

   24 while: WHILE boolexpr BEGINLOOP statements ENDLOOP

   25 do: DO BEGINLOOP statements ENDLOOP WHILE boolexpr

   26 read: READ vars

   27 write: WRITE vars

   28 return: expression

   29 vars: var varcomma

   30 varcomma: COMMA var varcomma
   31         | %empty

   32 statement: assignment
   33          | ifstmt
   34          | while
   35          | do
   36          | read
   37          | write
   38          | CONTINUE
   39          | return

   40 expression: multexpression expressionseq

   41 expressionseq: ADD multexpression expressionseq
   42              | SUB multexpression expressionseq
   43              | %empty

   44 multexpression: term termseq

   45 termseq: MULT term termseq
   46        | DIV term termseq
   47        | MOD term termseq
   48        | %empty

   49 neg: SUB
   50    | %empty

   51 termoption: var
   52           | NUMBER
   53           | L_PAREN expression R_PAREN

   54 term: neg termoption

   55 var: ident
   56    | ident L_SQUARE_BRACKET expression R_SQUARE_BRACKET

   57 not: NOT
   58    | %empty

   59 comp: EQ
   60     | NEQ
   61     | LT
   62     | GT
   63     | LTE
   64     | GTE

   65 boolexpr: relationandexpr boolexprseq

   66 boolexprseq: OR relationandexpr boolexprseq
   67            | %empty

   68 relationandexpr: relationexpr relationandexprseq

   69 relationandexprseq: AND relationexpr relationandexprseq
   70                   | %empty

   71 relationexpr: not relationexproptions

   72 relationexproptions: expression comp expression
   73                    | TRUE
   74                    | FALSE
   75                    | L_PAREN boolexpr R_PAREN


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 2 3
error (256)
IDENT (258) 8
EQUAL (259)
FUNCTION (260) 5
BEGIN_PARAMS (261) 5
END_PARAMS (262) 5
BEGIN_LOCALS (263) 5
END_LOCALS (264) 5
BEGIN_BODY (265) 5
END_BODY (266) 5
INTEGER (267) 13
ARRAY (268) 14
OF (269) 14
IF (270) 21
THEN (271) 21
ENDIF (272) 21
ELSE (273) 22
WHILE (274) 24 25
DO (275) 25
BEGINLOOP (276) 24 25
ENDLOOP (277) 24 25
CONTINUE (278) 38
READ (279) 26
WRITE (280) 27
AND (281) 69
OR (282) 66
NOT (283) 57
TRUE (284) 73
FALSE (285) 74
RETURN (286)
SUB (287) 42 49
ADD (288) 41
MULT (289) 45
DIV (290) 46
MOD (291) 47
EQ (292) 59
NEQ (293) 60
LT (294) 61
GT (295) 62
LTE (296) 63
GTE (297) 64
NUMBER (298) 14 52
SEMICOLON (299) 5 13 18
COLON (300) 13
COMMA (301) 12 30
L_PAREN (302) 53 75
R_PAREN (303) 53 75
L_SQUARE_BRACKET (304) 14 56
R_SQUARE_BRACKET (305) 14 56
ASSIGN (306) 20
NO_IDENT1 (307) 6
NO_IDENT2 (308) 7
COMMENT (309) 16


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
input (57)
    on left: 1 2, on right: 0 2
line (58)
    on left: 3 4, on right: 1 2
function (59)
    on left: 5, on right: 4
ident (60)
    on left: 6 7 8, on right: 5 11 12 55 56
declarationseq (61)
    on left: 9 10, on right: 5 9
declaration (62)
    on left: 11, on right: 9
declarations (63)
    on left: 12 13, on right: 11 12
arr (64)
    on left: 14 15, on right: 13
comment (65)
    on left: 16, on right: 17
statements (66)
    on left: 17 18 19, on right: 5 17 18 21 22 24 25
assignment (67)
    on left: 20, on right: 32
ifstmt (68)
    on left: 21, on right: 33
else (69)
    on left: 22 23, on right: 21
while (70)
    on left: 24, on right: 34
do (71)
    on left: 25, on right: 35
read (72)
    on left: 26, on right: 36
write (73)
    on left: 27, on right: 37
return (74)
    on left: 28, on right: 39
vars (75)
    on left: 29, on right: 26 27
varcomma (76)
    on left: 30 31, on right: 29 30
statement (77)
    on left: 32 33 34 35 36 37 38 39, on right: 18
expression (78)
    on left: 40, on right: 20 28 53 56 72
expressionseq (79)
    on left: 41 42 43, on right: 40 41 42
multexpression (80)
    on left: 44, on right: 40 41 42
termseq (81)
    on left: 45 46 47 48, on right: 44 45 46 47
neg (82)
    on left: 49 50, on right: 54
termoption (83)
    on left: 51 52 53, on right: 54
term (84)
    on left: 54, on right: 44 45 46 47
var (85)
    on left: 55 56, on right: 20 29 30 51
not (86)
    on left: 57 58, on right: 71
comp (87)
    on left: 59 60 61 62 63 64, on right: 72
boolexpr (88)
    on left: 65, on right: 21 24 25 75
boolexprseq (89)
    on left: 66 67, on right: 65 66
relationandexpr (90)
    on left: 68, on right: 65 66
relationandexprseq (91)
    on left: 69 70, on right: 68 69
relationexpr (92)
    on left: 71, on right: 68 69
relationexproptions (93)
    on left: 72 73 74 75, on right: 71


State 0

    0 $accept: . input $end

    FUNCTION  shift, and go to state 1
    '\n'      shift, and go to state 2

    input     go to state 3
    line      go to state 4
    function  go to state 5


State 1

    5 function: FUNCTION . ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    IDENT      shift, and go to state 6
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    ident  go to state 9


State 2

    3 line: '\n' .

    $default  reduce using rule 3 (line)


State 3

    0 $accept: input . $end
    2 input: input . '\n' line

    $end  shift, and go to state 10
    '\n'  shift, and go to state 11


State 4

    1 input: line .

    $default  reduce using rule 1 (input)


State 5

    4 line: function .

    $default  reduce using rule 4 (line)


State 6

    8 ident: IDENT .

    $default  reduce using rule 8 (ident)


State 7

    6 ident: NO_IDENT1 .

    $default  reduce using rule 6 (ident)


State 8

    7 ident: NO_IDENT2 .

    $default  reduce using rule 7 (ident)


State 9

    5 function: FUNCTION ident . SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    SEMICOLON  shift, and go to state 12


State 10

    0 $accept: input $end .

    $default  accept


State 11

    2 input: input '\n' . line

    FUNCTION  shift, and go to state 1
    '\n'      shift, and go to state 2

    line      go to state 13
    function  go to state 5


State 12

    5 function: FUNCTION ident SEMICOLON . BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_PARAMS  shift, and go to state 14


State 13

    2 input: input '\n' line .

    $default  reduce using rule 2 (input)


State 14

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS . declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    IDENT      shift, and go to state 6
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    $default  reduce using rule 10 (declarationseq)

    ident           go to state 15
    declarationseq  go to state 16
    declaration     go to state 17


State 15

   11 declaration: ident . declarations

    COLON  shift, and go to state 18
    COMMA  shift, and go to state 19

    declarations  go to state 20


State 16

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq . END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    END_PARAMS  shift, and go to state 21


State 17

    9 declarationseq: declaration . declarationseq

    IDENT      shift, and go to state 6
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    $default  reduce using rule 10 (declarationseq)

    ident           go to state 15
    declarationseq  go to state 22
    declaration     go to state 17


State 18

   13 declarations: COLON . arr INTEGER SEMICOLON

    ARRAY  shift, and go to state 23

    $default  reduce using rule 15 (arr)

    arr  go to state 24


State 19

   12 declarations: COMMA . ident declarations

    IDENT      shift, and go to state 6
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    ident  go to state 25


State 20

   11 declaration: ident declarations .

    $default  reduce using rule 11 (declaration)


State 21

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS . BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_LOCALS  shift, and go to state 26


State 22

    9 declarationseq: declaration declarationseq .

    $default  reduce using rule 9 (declarationseq)


State 23

   14 arr: ARRAY . L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF

    L_SQUARE_BRACKET  shift, and go to state 27


State 24

   13 declarations: COLON arr . INTEGER SEMICOLON

    INTEGER  shift, and go to state 28


State 25

   12 declarations: COMMA ident . declarations

    COLON  shift, and go to state 18
    COMMA  shift, and go to state 19

    declarations  go to state 29


State 26

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS . declarationseq END_LOCALS BEGIN_BODY statements END_BODY

    IDENT      shift, and go to state 6
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    $default  reduce using rule 10 (declarationseq)

    ident           go to state 15
    declarationseq  go to state 30
    declaration     go to state 17


State 27

   14 arr: ARRAY L_SQUARE_BRACKET . NUMBER R_SQUARE_BRACKET OF

    NUMBER  shift, and go to state 31


State 28

   13 declarations: COLON arr INTEGER . SEMICOLON

    SEMICOLON  shift, and go to state 32


State 29

   12 declarations: COMMA ident declarations .

    $default  reduce using rule 12 (declarations)


State 30

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq . END_LOCALS BEGIN_BODY statements END_BODY

    END_LOCALS  shift, and go to state 33


State 31

   14 arr: ARRAY L_SQUARE_BRACKET NUMBER . R_SQUARE_BRACKET OF

    R_SQUARE_BRACKET  shift, and go to state 34


State 32

   13 declarations: COLON arr INTEGER SEMICOLON .

    $default  reduce using rule 13 (declarations)


State 33

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 35


State 34

   14 arr: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET . OF

    OF  shift, and go to state 36


State 35

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY . statements END_BODY

    IDENT      shift, and go to state 6
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    DO         shift, and go to state 39
    CONTINUE   shift, and go to state 40
    READ       shift, and go to state 41
    WRITE      shift, and go to state 42
    SUB        shift, and go to state 43
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8
    COMMENT    shift, and go to state 44

    IDENT      [reduce using rule 50 (neg)]
    END_BODY   reduce using rule 19 (statements)
    NO_IDENT1  [reduce using rule 50 (neg)]
    NO_IDENT2  [reduce using rule 50 (neg)]
    $default   reduce using rule 50 (neg)

    ident           go to state 45
    comment         go to state 46
    statements      go to state 47
    assignment      go to state 48
    ifstmt          go to state 49
    while           go to state 50
    do              go to state 51
    read            go to state 52
    write           go to state 53
    return          go to state 54
    statement       go to state 55
    expression      go to state 56
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59
    var             go to state 60


State 36

   14 arr: ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF .

    $default  reduce using rule 14 (arr)


State 37

   21 ifstmt: IF . boolexpr THEN statements else ENDIF

    NOT  shift, and go to state 61

    $default  reduce using rule 58 (not)

    not              go to state 62
    boolexpr         go to state 63
    relationandexpr  go to state 64
    relationexpr     go to state 65


State 38

   24 while: WHILE . boolexpr BEGINLOOP statements ENDLOOP

    NOT  shift, and go to state 61

    $default  reduce using rule 58 (not)

    not              go to state 62
    boolexpr         go to state 66
    relationandexpr  go to state 64
    relationexpr     go to state 65


State 39

   25 do: DO . BEGINLOOP statements ENDLOOP WHILE boolexpr

    BEGINLOOP  shift, and go to state 67


State 40

   38 statement: CONTINUE .

    $default  reduce using rule 38 (statement)


State 41

   26 read: READ . vars

    IDENT      shift, and go to state 6
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    ident  go to state 45
    vars   go to state 68
    var    go to state 69


State 42

   27 write: WRITE . vars

    IDENT      shift, and go to state 6
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    ident  go to state 45
    vars   go to state 70
    var    go to state 69


State 43

   49 neg: SUB .

    $default  reduce using rule 49 (neg)


State 44

   16 comment: COMMENT .

    $default  reduce using rule 16 (comment)


State 45

   55 var: ident .
   56    | ident . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 71

    $default  reduce using rule 55 (var)


State 46

   17 statements: comment . statements

    IDENT      shift, and go to state 6
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    DO         shift, and go to state 39
    CONTINUE   shift, and go to state 40
    READ       shift, and go to state 41
    WRITE      shift, and go to state 42
    SUB        shift, and go to state 43
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8
    COMMENT    shift, and go to state 44

    IDENT      [reduce using rule 50 (neg)]
    NUMBER     reduce using rule 50 (neg)
    L_PAREN    reduce using rule 50 (neg)
    NO_IDENT1  [reduce using rule 50 (neg)]
    NO_IDENT2  [reduce using rule 50 (neg)]
    $default   reduce using rule 19 (statements)

    ident           go to state 45
    comment         go to state 46
    statements      go to state 72
    assignment      go to state 48
    ifstmt          go to state 49
    while           go to state 50
    do              go to state 51
    read            go to state 52
    write           go to state 53
    return          go to state 54
    statement       go to state 55
    expression      go to state 56
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59
    var             go to state 60


State 47

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 73


State 48

   32 statement: assignment .

    $default  reduce using rule 32 (statement)


State 49

   33 statement: ifstmt .

    $default  reduce using rule 33 (statement)


State 50

   34 statement: while .

    $default  reduce using rule 34 (statement)


State 51

   35 statement: do .

    $default  reduce using rule 35 (statement)


State 52

   36 statement: read .

    $default  reduce using rule 36 (statement)


State 53

   37 statement: write .

    $default  reduce using rule 37 (statement)


State 54

   39 statement: return .

    $default  reduce using rule 39 (statement)


State 55

   18 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 74


State 56

   28 return: expression .

    $default  reduce using rule 28 (return)


State 57

   40 expression: multexpression . expressionseq

    SUB  shift, and go to state 75
    ADD  shift, and go to state 76

    $default  reduce using rule 43 (expressionseq)

    expressionseq  go to state 77


State 58

   54 term: neg . termoption

    IDENT      shift, and go to state 6
    NUMBER     shift, and go to state 78
    L_PAREN    shift, and go to state 79
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    ident       go to state 45
    termoption  go to state 80
    var         go to state 81


State 59

   44 multexpression: term . termseq

    MULT  shift, and go to state 82
    DIV   shift, and go to state 83
    MOD   shift, and go to state 84

    $default  reduce using rule 48 (termseq)

    termseq  go to state 85


State 60

   20 assignment: var . ASSIGN expression

    ASSIGN  shift, and go to state 86


State 61

   57 not: NOT .

    $default  reduce using rule 57 (not)


State 62

   71 relationexpr: not . relationexproptions

    TRUE     shift, and go to state 87
    FALSE    shift, and go to state 88
    SUB      shift, and go to state 43
    L_PAREN  shift, and go to state 89

    L_PAREN   [reduce using rule 50 (neg)]
    $default  reduce using rule 50 (neg)

    expression           go to state 90
    multexpression       go to state 57
    neg                  go to state 58
    term                 go to state 59
    relationexproptions  go to state 91


State 63

   21 ifstmt: IF boolexpr . THEN statements else ENDIF

    THEN  shift, and go to state 92


State 64

   65 boolexpr: relationandexpr . boolexprseq

    OR  shift, and go to state 93

    $default  reduce using rule 67 (boolexprseq)

    boolexprseq  go to state 94


State 65

   68 relationandexpr: relationexpr . relationandexprseq

    AND  shift, and go to state 95

    $default  reduce using rule 70 (relationandexprseq)

    relationandexprseq  go to state 96


State 66

   24 while: WHILE boolexpr . BEGINLOOP statements ENDLOOP

    BEGINLOOP  shift, and go to state 97


State 67

   25 do: DO BEGINLOOP . statements ENDLOOP WHILE boolexpr

    IDENT      shift, and go to state 6
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    DO         shift, and go to state 39
    CONTINUE   shift, and go to state 40
    READ       shift, and go to state 41
    WRITE      shift, and go to state 42
    SUB        shift, and go to state 43
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8
    COMMENT    shift, and go to state 44

    IDENT      [reduce using rule 50 (neg)]
    ENDLOOP    reduce using rule 19 (statements)
    NO_IDENT1  [reduce using rule 50 (neg)]
    NO_IDENT2  [reduce using rule 50 (neg)]
    $default   reduce using rule 50 (neg)

    ident           go to state 45
    comment         go to state 46
    statements      go to state 98
    assignment      go to state 48
    ifstmt          go to state 49
    while           go to state 50
    do              go to state 51
    read            go to state 52
    write           go to state 53
    return          go to state 54
    statement       go to state 55
    expression      go to state 56
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59
    var             go to state 60


State 68

   26 read: READ vars .

    $default  reduce using rule 26 (read)


State 69

   29 vars: var . varcomma

    COMMA  shift, and go to state 99

    $default  reduce using rule 31 (varcomma)

    varcomma  go to state 100


State 70

   27 write: WRITE vars .

    $default  reduce using rule 27 (write)


State 71

   56 var: ident L_SQUARE_BRACKET . expression R_SQUARE_BRACKET

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    expression      go to state 101
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59


State 72

   17 statements: comment statements .

    $default  reduce using rule 17 (statements)


State 73

    5 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarationseq END_PARAMS BEGIN_LOCALS declarationseq END_LOCALS BEGIN_BODY statements END_BODY .

    $default  reduce using rule 5 (function)


State 74

   18 statements: statement SEMICOLON . statements

    IDENT      shift, and go to state 6
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    DO         shift, and go to state 39
    CONTINUE   shift, and go to state 40
    READ       shift, and go to state 41
    WRITE      shift, and go to state 42
    SUB        shift, and go to state 43
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8
    COMMENT    shift, and go to state 44

    IDENT      [reduce using rule 50 (neg)]
    NUMBER     reduce using rule 50 (neg)
    L_PAREN    reduce using rule 50 (neg)
    NO_IDENT1  [reduce using rule 50 (neg)]
    NO_IDENT2  [reduce using rule 50 (neg)]
    $default   reduce using rule 19 (statements)

    ident           go to state 45
    comment         go to state 46
    statements      go to state 102
    assignment      go to state 48
    ifstmt          go to state 49
    while           go to state 50
    do              go to state 51
    read            go to state 52
    write           go to state 53
    return          go to state 54
    statement       go to state 55
    expression      go to state 56
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59
    var             go to state 60


State 75

   42 expressionseq: SUB . multexpression expressionseq

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    multexpression  go to state 103
    neg             go to state 58
    term            go to state 59


State 76

   41 expressionseq: ADD . multexpression expressionseq

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    multexpression  go to state 104
    neg             go to state 58
    term            go to state 59


State 77

   40 expression: multexpression expressionseq .

    $default  reduce using rule 40 (expression)


State 78

   52 termoption: NUMBER .

    $default  reduce using rule 52 (termoption)


State 79

   53 termoption: L_PAREN . expression R_PAREN

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    expression      go to state 105
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59


State 80

   54 term: neg termoption .

    $default  reduce using rule 54 (term)


State 81

   51 termoption: var .

    $default  reduce using rule 51 (termoption)


State 82

   45 termseq: MULT . term termseq

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    neg   go to state 58
    term  go to state 106


State 83

   46 termseq: DIV . term termseq

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    neg   go to state 58
    term  go to state 107


State 84

   47 termseq: MOD . term termseq

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    neg   go to state 58
    term  go to state 108


State 85

   44 multexpression: term termseq .

    $default  reduce using rule 44 (multexpression)


State 86

   20 assignment: var ASSIGN . expression

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    expression      go to state 109
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59


State 87

   73 relationexproptions: TRUE .

    $default  reduce using rule 73 (relationexproptions)


State 88

   74 relationexproptions: FALSE .

    $default  reduce using rule 74 (relationexproptions)


State 89

   75 relationexproptions: L_PAREN . boolexpr R_PAREN

    NOT  shift, and go to state 61

    $default  reduce using rule 58 (not)

    not              go to state 62
    boolexpr         go to state 110
    relationandexpr  go to state 64
    relationexpr     go to state 65


State 90

   72 relationexproptions: expression . comp expression

    EQ   shift, and go to state 111
    NEQ  shift, and go to state 112
    LT   shift, and go to state 113
    GT   shift, and go to state 114
    LTE  shift, and go to state 115
    GTE  shift, and go to state 116

    comp  go to state 117


State 91

   71 relationexpr: not relationexproptions .

    $default  reduce using rule 71 (relationexpr)


State 92

   21 ifstmt: IF boolexpr THEN . statements else ENDIF

    IDENT      shift, and go to state 6
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    DO         shift, and go to state 39
    CONTINUE   shift, and go to state 40
    READ       shift, and go to state 41
    WRITE      shift, and go to state 42
    SUB        shift, and go to state 43
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8
    COMMENT    shift, and go to state 44

    IDENT      [reduce using rule 50 (neg)]
    NUMBER     reduce using rule 50 (neg)
    L_PAREN    reduce using rule 50 (neg)
    NO_IDENT1  [reduce using rule 50 (neg)]
    NO_IDENT2  [reduce using rule 50 (neg)]
    $default   reduce using rule 19 (statements)

    ident           go to state 45
    comment         go to state 46
    statements      go to state 118
    assignment      go to state 48
    ifstmt          go to state 49
    while           go to state 50
    do              go to state 51
    read            go to state 52
    write           go to state 53
    return          go to state 54
    statement       go to state 55
    expression      go to state 56
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59
    var             go to state 60


State 93

   66 boolexprseq: OR . relationandexpr boolexprseq

    NOT  shift, and go to state 61

    $default  reduce using rule 58 (not)

    not              go to state 62
    relationandexpr  go to state 119
    relationexpr     go to state 65


State 94

   65 boolexpr: relationandexpr boolexprseq .

    $default  reduce using rule 65 (boolexpr)


State 95

   69 relationandexprseq: AND . relationexpr relationandexprseq

    NOT  shift, and go to state 61

    $default  reduce using rule 58 (not)

    not           go to state 62
    relationexpr  go to state 120


State 96

   68 relationandexpr: relationexpr relationandexprseq .

    $default  reduce using rule 68 (relationandexpr)


State 97

   24 while: WHILE boolexpr BEGINLOOP . statements ENDLOOP

    IDENT      shift, and go to state 6
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    DO         shift, and go to state 39
    CONTINUE   shift, and go to state 40
    READ       shift, and go to state 41
    WRITE      shift, and go to state 42
    SUB        shift, and go to state 43
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8
    COMMENT    shift, and go to state 44

    IDENT      [reduce using rule 50 (neg)]
    ENDLOOP    reduce using rule 19 (statements)
    NO_IDENT1  [reduce using rule 50 (neg)]
    NO_IDENT2  [reduce using rule 50 (neg)]
    $default   reduce using rule 50 (neg)

    ident           go to state 45
    comment         go to state 46
    statements      go to state 121
    assignment      go to state 48
    ifstmt          go to state 49
    while           go to state 50
    do              go to state 51
    read            go to state 52
    write           go to state 53
    return          go to state 54
    statement       go to state 55
    expression      go to state 56
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59
    var             go to state 60


State 98

   25 do: DO BEGINLOOP statements . ENDLOOP WHILE boolexpr

    ENDLOOP  shift, and go to state 122


State 99

   30 varcomma: COMMA . var varcomma

    IDENT      shift, and go to state 6
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8

    ident  go to state 45
    var    go to state 123


State 100

   29 vars: var varcomma .

    $default  reduce using rule 29 (vars)


State 101

   56 var: ident L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 124


State 102

   18 statements: statement SEMICOLON statements .

    $default  reduce using rule 18 (statements)


State 103

   42 expressionseq: SUB multexpression . expressionseq

    SUB  shift, and go to state 75
    ADD  shift, and go to state 76

    $default  reduce using rule 43 (expressionseq)

    expressionseq  go to state 125


State 104

   41 expressionseq: ADD multexpression . expressionseq

    SUB  shift, and go to state 75
    ADD  shift, and go to state 76

    $default  reduce using rule 43 (expressionseq)

    expressionseq  go to state 126


State 105

   53 termoption: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 127


State 106

   45 termseq: MULT term . termseq

    MULT  shift, and go to state 82
    DIV   shift, and go to state 83
    MOD   shift, and go to state 84

    $default  reduce using rule 48 (termseq)

    termseq  go to state 128


State 107

   46 termseq: DIV term . termseq

    MULT  shift, and go to state 82
    DIV   shift, and go to state 83
    MOD   shift, and go to state 84

    $default  reduce using rule 48 (termseq)

    termseq  go to state 129


State 108

   47 termseq: MOD term . termseq

    MULT  shift, and go to state 82
    DIV   shift, and go to state 83
    MOD   shift, and go to state 84

    $default  reduce using rule 48 (termseq)

    termseq  go to state 130


State 109

   20 assignment: var ASSIGN expression .

    $default  reduce using rule 20 (assignment)


State 110

   75 relationexproptions: L_PAREN boolexpr . R_PAREN

    R_PAREN  shift, and go to state 131


State 111

   59 comp: EQ .

    $default  reduce using rule 59 (comp)


State 112

   60 comp: NEQ .

    $default  reduce using rule 60 (comp)


State 113

   61 comp: LT .

    $default  reduce using rule 61 (comp)


State 114

   62 comp: GT .

    $default  reduce using rule 62 (comp)


State 115

   63 comp: LTE .

    $default  reduce using rule 63 (comp)


State 116

   64 comp: GTE .

    $default  reduce using rule 64 (comp)


State 117

   72 relationexproptions: expression comp . expression

    SUB  shift, and go to state 43

    $default  reduce using rule 50 (neg)

    expression      go to state 132
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59


State 118

   21 ifstmt: IF boolexpr THEN statements . else ENDIF

    ELSE  shift, and go to state 133

    $default  reduce using rule 23 (else)

    else  go to state 134


State 119

   66 boolexprseq: OR relationandexpr . boolexprseq

    OR  shift, and go to state 93

    $default  reduce using rule 67 (boolexprseq)

    boolexprseq  go to state 135


State 120

   69 relationandexprseq: AND relationexpr . relationandexprseq

    AND  shift, and go to state 95

    $default  reduce using rule 70 (relationandexprseq)

    relationandexprseq  go to state 136


State 121

   24 while: WHILE boolexpr BEGINLOOP statements . ENDLOOP

    ENDLOOP  shift, and go to state 137


State 122

   25 do: DO BEGINLOOP statements ENDLOOP . WHILE boolexpr

    WHILE  shift, and go to state 138


State 123

   30 varcomma: COMMA var . varcomma

    COMMA  shift, and go to state 99

    $default  reduce using rule 31 (varcomma)

    varcomma  go to state 139


State 124

   56 var: ident L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    $default  reduce using rule 56 (var)


State 125

   42 expressionseq: SUB multexpression expressionseq .

    $default  reduce using rule 42 (expressionseq)


State 126

   41 expressionseq: ADD multexpression expressionseq .

    $default  reduce using rule 41 (expressionseq)


State 127

   53 termoption: L_PAREN expression R_PAREN .

    $default  reduce using rule 53 (termoption)


State 128

   45 termseq: MULT term termseq .

    $default  reduce using rule 45 (termseq)


State 129

   46 termseq: DIV term termseq .

    $default  reduce using rule 46 (termseq)


State 130

   47 termseq: MOD term termseq .

    $default  reduce using rule 47 (termseq)


State 131

   75 relationexproptions: L_PAREN boolexpr R_PAREN .

    $default  reduce using rule 75 (relationexproptions)


State 132

   72 relationexproptions: expression comp expression .

    $default  reduce using rule 72 (relationexproptions)


State 133

   22 else: ELSE . statements

    IDENT      shift, and go to state 6
    IF         shift, and go to state 37
    WHILE      shift, and go to state 38
    DO         shift, and go to state 39
    CONTINUE   shift, and go to state 40
    READ       shift, and go to state 41
    WRITE      shift, and go to state 42
    SUB        shift, and go to state 43
    NO_IDENT1  shift, and go to state 7
    NO_IDENT2  shift, and go to state 8
    COMMENT    shift, and go to state 44

    IDENT      [reduce using rule 50 (neg)]
    ENDIF      reduce using rule 19 (statements)
    NO_IDENT1  [reduce using rule 50 (neg)]
    NO_IDENT2  [reduce using rule 50 (neg)]
    $default   reduce using rule 50 (neg)

    ident           go to state 45
    comment         go to state 46
    statements      go to state 140
    assignment      go to state 48
    ifstmt          go to state 49
    while           go to state 50
    do              go to state 51
    read            go to state 52
    write           go to state 53
    return          go to state 54
    statement       go to state 55
    expression      go to state 56
    multexpression  go to state 57
    neg             go to state 58
    term            go to state 59
    var             go to state 60


State 134

   21 ifstmt: IF boolexpr THEN statements else . ENDIF

    ENDIF  shift, and go to state 141


State 135

   66 boolexprseq: OR relationandexpr boolexprseq .

    $default  reduce using rule 66 (boolexprseq)


State 136

   69 relationandexprseq: AND relationexpr relationandexprseq .

    $default  reduce using rule 69 (relationandexprseq)


State 137

   24 while: WHILE boolexpr BEGINLOOP statements ENDLOOP .

    $default  reduce using rule 24 (while)


State 138

   25 do: DO BEGINLOOP statements ENDLOOP WHILE . boolexpr

    NOT  shift, and go to state 61

    $default  reduce using rule 58 (not)

    not              go to state 62
    boolexpr         go to state 142
    relationandexpr  go to state 64
    relationexpr     go to state 65


State 139

   30 varcomma: COMMA var varcomma .

    $default  reduce using rule 30 (varcomma)


State 140

   22 else: ELSE statements .

    $default  reduce using rule 22 (else)


State 141

   21 ifstmt: IF boolexpr THEN statements else ENDIF .

    $default  reduce using rule 21 (ifstmt)


State 142

   25 do: DO BEGINLOOP statements ENDLOOP WHILE boolexpr .

    $default  reduce using rule 25 (do)
